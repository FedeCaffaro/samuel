{
    "address": "0x8f4bEAb50E5a6c3a8478Bb8acB393BF19Fec3fAb",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_uri",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "previousOwner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "OwnershipTransferred",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "indexed": false,
            "internalType": "uint256[]",
            "name": "values",
            "type": "uint256[]"
          }
        ],
        "name": "TransferBatch",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "TransferSingle",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "string",
            "name": "value",
            "type": "string"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "URI",
        "type": "event"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "accounts",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          }
        ],
        "name": "balanceOfBatch",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "baseURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_quantity",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "claimItem",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_quantities",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "_ids",
            "type": "uint256[]"
          }
        ],
        "name": "claimItems",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_maxPerWallet",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_maxToMint",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_initialSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_maxSupply",
            "type": "uint256"
          }
        ],
        "name": "createItem",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256[]",
            "name": "_ids",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "_maxPerWallet",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "_maxToMint",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "_initialSupply",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "_maxSupply",
            "type": "uint256[]"
          }
        ],
        "name": "createItems",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "exists",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "flipSaleState",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "idStats",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "maxSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "maxToMint",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "maxPerWallet",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "initialSupply",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "renounceOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256[]",
            "name": "ids",
            "type": "uint256[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "safeBatchTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "saleIsActive",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_baseURI",
            "type": "string"
          }
        ],
        "name": "setBaseURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_initialSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "setInitialSupply",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_maxPerWallet",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "setMaxPerWallet",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_maxSupply",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "setMaxSupply",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_maxToMint",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "setMaxToMint",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_newURI",
            "type": "string"
          }
        ],
        "name": "setURI",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "id",
            "type": "uint256"
          }
        ],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "name": "transferOwnership",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_id",
            "type": "uint256"
          }
        ],
        "name": "uri",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdraw",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0xeadb86259be888442db9bc9f180853505b20ef088e2d5a7eebbb934f591d6c70",
    "receipt": {
      "to": null,
      "from": "0x399Db9b924bC348BfC3bD777817631eb5A79b152",
      "contractAddress": "0x8f4bEAb50E5a6c3a8478Bb8acB393BF19Fec3fAb",
      "transactionIndex": 13,
      "gasUsed": "5055615",
      "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000002000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000001000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000002008000000000000000020000000000000000000000010000000000000000000000000000000080000000000",
      "blockHash": "0xfd1b6bc64e4ea0d8fb1b1c29e31c3ca0ad8841cfc58a55ad56568259f5e6d457",
      "transactionHash": "0xeadb86259be888442db9bc9f180853505b20ef088e2d5a7eebbb934f591d6c70",
      "logs": [
        {
          "transactionIndex": 13,
          "blockNumber": 10336303,
          "transactionHash": "0xeadb86259be888442db9bc9f180853505b20ef088e2d5a7eebbb934f591d6c70",
          "address": "0x8f4bEAb50E5a6c3a8478Bb8acB393BF19Fec3fAb",
          "topics": [
            "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000399db9b924bc348bfc3bd777817631eb5a79b152"
          ],
          "data": "0x",
          "logIndex": 31,
          "blockHash": "0xfd1b6bc64e4ea0d8fb1b1c29e31c3ca0ad8841cfc58a55ad56568259f5e6d457"
        },
        {
          "transactionIndex": 13,
          "blockNumber": 10336303,
          "transactionHash": "0xeadb86259be888442db9bc9f180853505b20ef088e2d5a7eebbb934f591d6c70",
          "address": "0x8f4bEAb50E5a6c3a8478Bb8acB393BF19Fec3fAb",
          "topics": [
            "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
            "0x000000000000000000000000399db9b924bc348bfc3bd777817631eb5a79b152",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000399db9b924bc348bfc3bd777817631eb5a79b152"
          ],
          "data": "0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001",
          "logIndex": 32,
          "blockHash": "0xfd1b6bc64e4ea0d8fb1b1c29e31c3ca0ad8841cfc58a55ad56568259f5e6d457"
        },
        {
          "transactionIndex": 13,
          "blockNumber": 10336303,
          "transactionHash": "0xeadb86259be888442db9bc9f180853505b20ef088e2d5a7eebbb934f591d6c70",
          "address": "0x8f4bEAb50E5a6c3a8478Bb8acB393BF19Fec3fAb",
          "topics": [
            "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62",
            "0x000000000000000000000000399db9b924bc348bfc3bd777817631eb5a79b152",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000399db9b924bc348bfc3bd777817631eb5a79b152"
          ],
          "data": "0x00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001",
          "logIndex": 33,
          "blockHash": "0xfd1b6bc64e4ea0d8fb1b1c29e31c3ca0ad8841cfc58a55ad56568259f5e6d457"
        }
      ],
      "blockNumber": 10336303,
      "cumulativeGasUsed": "9249450",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "https://samotclub.mypinata.cloud/ipfs/QmeLn1Vx2FLMQypLPqQfohYqEt4kJnUx5DUpc3pmwGU85w/{id}.json",
      "DonRouch",
      "DR"
    ],
    "numDeployments": 1,
    "solcInputHash": "297b42efd41e36485927001e0f8650ba",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"claimItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"createItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxPerWallet\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxToMint\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_initialSupply\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxSupply\",\"type\":\"uint256[]\"}],\"name\":\"createItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setInitialSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPerWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setMaxPerWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setMaxToMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newURI\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"exists(uint256)\":{\"details\":\"Indicates whether any token exist with a given id, or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalSupply(uint256)\":{\"details\":\"Total amount of tokens in with a given id.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Don Rouch WhoIsSamot - an 1155 contract for  0800 Don Rouch\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DonRouch.sol\":\"DonRouch\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] -= amounts[i];\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe243a49f159c97fdd011edb7a8ed1b48175f0fa6b8592bb6dcccac7e22d8c37b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/DonRouch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n// 1) Hacerlo upgradable para introducirle cambios\\n// 2) Hacer los merkletrees para whitelistear\\n \\n\\n// \\u2588\\u2588\\u2557    \\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557     \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557    \\u2584\\u2584\\u2588\\u2588\\u2588\\u2584\\u2584\\u00b7 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2551    \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557    \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d    \\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n// \\u2588\\u2588\\u2551 \\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551    \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551         \\u2584\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551    \\u2588\\u2588\\u2551\\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551    \\u255a\\u2550\\u2550\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551         \\u2580\\u2580\\u2550\\u2550\\u255d\\n// \\u255a\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d    \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551    \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d   \\u2588\\u2588\\u2551         \\u2588\\u2588\\u2557\\n//  \\u255a\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u2580\\u2580\\u2580\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d    \\u255a\\u2550\\u255d         \\u255a\\u2550\\u255d\\n\\n/**\\n * @title Don Rouch\\n * WhoIsSamot - an 1155 contract for  0800 Don Rouch\\n */\\ncontract DonRouch is ERC1155Supply, Ownable , ReentrancyGuard{\\n\\n    using SafeMath for uint256;\\n    using Strings for string;\\n\\n    struct itemData {\\n        uint256 maxSupply;\\n        uint256 maxToMint;\\n        uint256 maxPerWallet;\\n        uint256 initialSupply;\\n    }\\n    bool public saleIsActive = false;\\n    string public name;\\n    string public symbol;\\n    string public baseURI= \\\"https://samotclub.mypinata.cloud/ipfs/QmeLn1Vx2FLMQypLPqQfohYqEt4kJnUx5DUpc3pmwGU85w/\\\";\\n\\n    mapping(uint256 => itemData) public idStats ; \\n\\n\\n    constructor(\\n        string memory _uri\\n        ,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC1155(_uri) {\\n        name = _name;\\n        symbol = _symbol;\\n        createItem(1, 1, 1, 1, 10);\\n        createItem(2, 3, 2, 1, 10);\\n    }\\n\\n    function uri(uint256 _id) override public view returns (string memory){\\n        require(exists(_id), \\\"ERC1155: NONEXISTENT_TOKEN\\\");\\n        return(\\n            string(abi.encodePacked(baseURI,Strings.toString(_id),\\\".json\\\"))\\n        );\\n    }\\n\\n    function setBaseURI(string memory _baseURI) external onlyOwner{\\n        baseURI = _baseURI;\\n    }\\n\\n    function setURI(string memory _newURI) public onlyOwner {\\n        _setURI(_newURI);\\n    }\\n\\n\\n    function setMaxToMint(uint256 _maxToMint, uint256 _id) external onlyOwner {\\n        idStats[_id].maxToMint = _maxToMint;\\n    }\\n\\n    function setMaxPerWallet(uint256 _maxPerWallet, uint256 _id) external onlyOwner {\\n        idStats[_id].maxPerWallet = _maxPerWallet;\\n    }\\n\\n    function setMaxSupply(uint256 _maxSupply, uint256 _id) external onlyOwner {\\n        idStats[_id].maxSupply = _maxSupply;\\n    }\\n\\n\\n    function setInitialSupply(uint256 _initialSupply, uint256 _id) external onlyOwner {\\n        idStats[_id].initialSupply = _initialSupply;\\n    }\\n\\n    function flipSaleState() public onlyOwner {\\n        saleIsActive = !saleIsActive;\\n    }\\n    \\n    function createItems(uint256[] memory _ids, uint256[] memory _maxPerWallet, uint256[] memory _maxToMint,uint256[] memory _initialSupply,uint256[] memory _maxSupply) public onlyOwner{\\n        for(uint256 i = 0; i< _ids.length; i++){\\n        idStats[_ids[i]].maxPerWallet = _maxPerWallet[i];\\n        idStats[_ids[i]].maxToMint = _maxToMint[i];\\n        idStats[_ids[i]].initialSupply = _initialSupply[i];\\n        idStats[_ids[i]].maxSupply = _maxSupply[i];\\n        _mint(msg.sender,_ids[i],_initialSupply[i],\\\"\\\");\\n        }\\n    }\\n\\n    function createItem(uint256 _id, uint256 _maxPerWallet, uint256 _maxToMint,uint256 _initialSupply,uint256 _maxSupply) public onlyOwner{\\n        idStats[_id].maxPerWallet = _maxPerWallet;\\n        idStats[_id].maxToMint = _maxToMint;\\n        idStats[_id].initialSupply = _initialSupply;\\n        idStats[_id].maxSupply = _maxSupply;\\n        _mint(msg.sender,_id,_initialSupply,\\\"\\\");\\n    }\\n\\n    function claimItem(uint256 _quantity,uint256 _id) external {\\n        require(saleIsActive, \\\"Claim is not active.\\\");\\n        require(\\n            totalSupply(_id).add(_quantity) <= idStats[_id].maxSupply,  \\n            \\\"Minting limit reached.\\\"\\n        );\\n        require(_quantity > 0, \\\"Quantity cannot be 0.\\\");\\n        require(\\n                balanceOf(msg.sender,_id).add(_quantity) <= idStats[_id].maxPerWallet,\\n                \\\"Exceeds wallet limit.\\\"\\n            );\\n        require(\\n                _quantity <= idStats[_id].maxToMint, \\n                \\\"Exceeds NFT per transaction limit.\\\"\\n            );\\n        _mint(msg.sender,_id,_quantity,\\\"\\\");\\n        totalSupply(_id).add(_quantity);\\n    }\\n\\n    function claimItems(uint256[] calldata _quantities,uint256[] calldata _ids) external {\\n        require(saleIsActive, \\\"Claim is not active.\\\");\\n        for(uint256 i=0;i<_ids.length;i++){\\n            require(totalSupply(_ids[i]).add(_quantities[i]) <= idStats[_ids[i]].maxSupply,   \\n            \\\"Minting limit reached.\\\");\\n            require(_quantities[i] > 0, \\\"Quantity cannot be 0.\\\");\\n            require(\\n                balanceOf(msg.sender,_ids[i]).add(_quantities[i]) <= idStats[_ids[i]].maxPerWallet,\\n                \\\"Exceeds wallet limit.\\\"\\n            );\\n            require(\\n                _quantities[i] <= idStats[_ids[i]].maxToMint, \\n                \\\"Exceeds NFT per transaction limit.\\\"\\n            );\\n            totalSupply(_ids[i]).add(_quantities[i]);\\n\\n        }\\n        _mintBatch(msg.sender,_ids,_quantities,\\\"\\\");\\n    }\\n    \\n    \\n    function withdraw() external onlyOwner nonReentrant {\\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n            require(success, \\\"Transfer failed.\\\"); \\n    }\\n}\\n\",\"keccak256\":\"0x778041f9fd02d9712d3390b56d4416651c88d556bc2bbf8d28ebe7c80aecd083\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040526000600660006101000a81548160ff0219169083151502179055506040518060800160405280605581526020016200634060559139600990805190602001906200005092919062000981565b503480156200005e57600080fd5b506040516200639538038062006395833981810160405281019062000084919062000bce565b8262000096816200012c60201b60201c565b50620000b7620000ab6200014860201b60201c565b6200015060201b60201c565b60016005819055508160079080519060200190620000d792919062000981565b508060089080519060200190620000f092919062000981565b5062000109600180600180600a6200021660201b60201c565b620001236002600360026001600a6200021660201b60201c565b5050506200139c565b80600290805190602001906200014492919062000981565b5050565b600033905090565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620002266200014860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166200024c6200033b60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1614620002a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200029c9062000ce8565b60405180910390fd5b83600a60008781526020019081526020016000206002018190555082600a60008781526020019081526020016000206001018190555081600a60008781526020019081526020016000206003018190555080600a60008781526020019081526020016000206000018190555062000334338684604051806020016040528060008152506200036560201b60201c565b5050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620003d8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003cf9062000d80565b60405180910390fd5b6000620003ea6200014860201b60201c565b9050620004238160008762000405886200052a60201b60201c565b62000416886200052a60201b60201c565b87620005ab60201b60201c565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000484919062000ddb565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516200050492919062000e49565b60405180910390a462000523816000878787876200074c60201b60201c565b5050505050565b60606000600167ffffffffffffffff8111156200054c576200054b62000a60565b5b6040519080825280602002602001820160405280156200057b5781602001602082028036833780820191505090505b509050828160008151811062000596576200059562000e76565b5b60200260200101818152505080915050919050565b620005c68686868686866200095660201b62001d4f1760201c565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415620006855760005b835181101562000683578281815181106200061f576200061e62000e76565b5b60200260200101516003600086848151811062000641576200064062000e76565b5b60200260200101518152602001908152602001600020600082825462000668919062000ddb565b92505081905550806200067b9062000ea5565b9050620005ff565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415620007445760005b83518110156200074257828181518110620006de57620006dd62000e76565b5b6020026020010151600360008684815181106200070057620006ff62000e76565b5b60200260200101518152602001908152602001600020600082825462000727919062000ef3565b92505081905550806200073a9062000ea5565b9050620006be565b505b505050505050565b620007788473ffffffffffffffffffffffffffffffffffffffff166200095e60201b62001d571760201c565b156200094e578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401620007c195949392919062000fd0565b602060405180830381600087803b158015620007dc57600080fd5b505af19250505080156200081057506040513d601f19601f820116820180604052508101906200080d919062001091565b60015b620008c2576200081f620010d0565b806308c379a0141562000883575062000837620010f5565b8062000844575062000885565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200087a9190620011e3565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008b9906200127d565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146200094c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620009439062001315565b60405180910390fd5b505b505050505050565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546200098f9062001366565b90600052602060002090601f016020900481019282620009b35760008555620009ff565b82601f10620009ce57805160ff1916838001178555620009ff565b82800160010185558215620009ff579182015b82811115620009fe578251825591602001919060010190620009e1565b5b50905062000a0e919062000a12565b5090565b5b8082111562000a2d57600081600090555060010162000a13565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a9a8262000a4f565b810181811067ffffffffffffffff8211171562000abc5762000abb62000a60565b5b80604052505050565b600062000ad162000a31565b905062000adf828262000a8f565b919050565b600067ffffffffffffffff82111562000b025762000b0162000a60565b5b62000b0d8262000a4f565b9050602081019050919050565b60005b8381101562000b3a57808201518184015260208101905062000b1d565b8381111562000b4a576000848401525b50505050565b600062000b6762000b618462000ae4565b62000ac5565b90508281526020810184848401111562000b865762000b8562000a4a565b5b62000b9384828562000b1a565b509392505050565b600082601f83011262000bb35762000bb262000a45565b5b815162000bc584826020860162000b50565b91505092915050565b60008060006060848603121562000bea5762000be962000a3b565b5b600084015167ffffffffffffffff81111562000c0b5762000c0a62000a40565b5b62000c198682870162000b9b565b935050602084015167ffffffffffffffff81111562000c3d5762000c3c62000a40565b5b62000c4b8682870162000b9b565b925050604084015167ffffffffffffffff81111562000c6f5762000c6e62000a40565b5b62000c7d8682870162000b9b565b9150509250925092565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000cd060208362000c87565b915062000cdd8262000c98565b602082019050919050565b6000602082019050818103600083015262000d038162000cc1565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600062000d6860218362000c87565b915062000d758262000d0a565b604082019050919050565b6000602082019050818103600083015262000d9b8162000d59565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000de88262000da2565b915062000df58362000da2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000e2d5762000e2c62000dac565b5b828201905092915050565b62000e438162000da2565b82525050565b600060408201905062000e60600083018562000e38565b62000e6f602083018462000e38565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600062000eb28262000da2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000ee85762000ee762000dac565b5b600182019050919050565b600062000f008262000da2565b915062000f0d8362000da2565b92508282101562000f235762000f2262000dac565b5b828203905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000f5b8262000f2e565b9050919050565b62000f6d8162000f4e565b82525050565b600081519050919050565b600082825260208201905092915050565b600062000f9c8262000f73565b62000fa8818562000f7e565b935062000fba81856020860162000b1a565b62000fc58162000a4f565b840191505092915050565b600060a08201905062000fe7600083018862000f62565b62000ff6602083018762000f62565b62001005604083018662000e38565b62001014606083018562000e38565b818103608083015262001028818462000f8f565b90509695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200106b8162001034565b81146200107757600080fd5b50565b6000815190506200108b8162001060565b92915050565b600060208284031215620010aa57620010a962000a3b565b5b6000620010ba848285016200107a565b91505092915050565b60008160e01c9050919050565b600060033d1115620010f25760046000803e620010ef600051620010c3565b90505b90565b600060443d1015620011075762001194565b6200111162000a31565b60043d036004823e80513d602482011167ffffffffffffffff821117156200113b57505062001194565b808201805167ffffffffffffffff8111156200115b575050505062001194565b80602083010160043d0385018111156200117a57505050505062001194565b6200118b8260200185018662000a8f565b82955050505050505b90565b600081519050919050565b6000620011af8262001197565b620011bb818562000c87565b9350620011cd81856020860162000b1a565b620011d88162000a4f565b840191505092915050565b60006020820190508181036000830152620011ff8184620011a2565b905092915050565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b60006200126560348362000c87565b9150620012728262001207565b604082019050919050565b60006020820190508181036000830152620012988162001256565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000620012fd60288362000c87565b91506200130a826200129f565b604082019050919050565b600060208201905081810360008301526200133081620012ee565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200137f57607f821691505b6020821081141562001396576200139562001337565b5b50919050565b614f9480620013ac6000396000f3fe608060405234801561001057600080fd5b50600436106101d95760003560e01c80635f400b4d11610104578063a35a813d116100a2578063e985e9c511610071578063e985e9c514610517578063eb8d244414610547578063f242432a14610565578063f2fde38b14610581576101d9565b8063a35a813d1461047c578063a7dc7f2a14610498578063bd85b039146104b4578063d23f3670146104e4576101d9565b8063715018a6116100de578063715018a61461041a5780638da5cb5b1461042457806395d89b4114610442578063a22cb46514610460576101d9565b80635f400b4d146103c45780636c0360eb146103e05780636e277faa146103fe576101d9565b806337da577c1161017c57806353ac2e2f1161014b57806353ac2e2f1461035457806355f804b31461037057806356ad15f61461038c57806356d51e6f146103a8576101d9565b806337da577c146102ce5780633ccfd60b146102ea5780634e1273f4146102f45780634f558e7914610324576101d9565b806306fdde03116101b857806306fdde031461025a5780630e89341c146102785780632eb2c2d6146102a857806334918dfd146102c4576101d9565b8062fdd58e146101de57806301ffc9a71461020e57806302fe53051461023e575b600080fd5b6101f860048036038101906101f39190613207565b61059d565b6040516102059190613256565b60405180910390f35b610228600480360381019061022391906132c9565b610666565b6040516102359190613311565b60405180910390f35b61025860048036038101906102539190613472565b610748565b005b6102626107d0565b60405161026f9190613543565b60405180910390f35b610292600480360381019061028d9190613565565b61085e565b60405161029f9190613543565b60405180910390f35b6102c260048036038101906102bd91906136fb565b6108da565b005b6102cc61097b565b005b6102e860048036038101906102e391906137ca565b610a23565b005b6102f2610abe565b005b61030e600480360381019061030991906138cd565b610c3f565b60405161031b9190613a03565b60405180910390f35b61033e60048036038101906103399190613565565b610d58565b60405161034b9190613311565b60405180910390f35b61036e60048036038101906103699190613a80565b610d6c565b005b61038a60048036038101906103859190613472565b611132565b005b6103a660048036038101906103a191906137ca565b6111c8565b005b6103c260048036038101906103bd91906137ca565b611263565b005b6103de60048036038101906103d99190613b01565b6112fe565b005b6103e8611408565b6040516103f59190613543565b60405180910390f35b61041860048036038101906104139190613b7c565b611496565b005b6104226116c4565b005b61042c61174c565b6040516104399190613c92565b60405180910390f35b61044a611776565b6040516104579190613543565b60405180910390f35b61047a60048036038101906104759190613cd9565b611804565b005b610496600480360381019061049191906137ca565b61181a565b005b6104b260048036038101906104ad91906137ca565b6118b5565b005b6104ce60048036038101906104c99190613565565b611ac2565b6040516104db9190613256565b60405180910390f35b6104fe60048036038101906104f99190613565565b611adf565b60405161050e9493929190613d19565b60405180910390f35b610531600480360381019061052c9190613d5e565b611b0f565b60405161053e9190613311565b60405180910390f35b61054f611ba3565b60405161055c9190613311565b60405180910390f35b61057f600480360381019061057a9190613d9e565b611bb6565b005b61059b60048036038101906105969190613e35565b611c57565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590613ed4565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061073157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610741575061074082611d7a565b5b9050919050565b610750611de4565b73ffffffffffffffffffffffffffffffffffffffff1661076e61174c565b73ffffffffffffffffffffffffffffffffffffffff16146107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb90613f40565b60405180910390fd5b6107cd81611dec565b50565b600780546107dd90613f8f565b80601f016020809104026020016040519081016040528092919081815260200182805461080990613f8f565b80156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b505050505081565b606061086982610d58565b6108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f9061400d565b60405180910390fd5b60096108b383611e06565b6040516020016108c4929190614149565b6040516020818303038152906040529050919050565b6108e2611de4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610928575061092785610922611de4565b611b0f565b5b610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e906141ea565b60405180910390fd5b6109748585858585611f67565b5050505050565b610983611de4565b73ffffffffffffffffffffffffffffffffffffffff166109a161174c565b73ffffffffffffffffffffffffffffffffffffffff16146109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90613f40565b60405180910390fd5b600660009054906101000a900460ff1615600660006101000a81548160ff021916908315150217905550565b610a2b611de4565b73ffffffffffffffffffffffffffffffffffffffff16610a4961174c565b73ffffffffffffffffffffffffffffffffffffffff1614610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9690613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600001819055505050565b610ac6611de4565b73ffffffffffffffffffffffffffffffffffffffff16610ae461174c565b73ffffffffffffffffffffffffffffffffffffffff1614610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613f40565b60405180910390fd5b60026005541415610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790614256565b60405180910390fd5b600260058190555060003373ffffffffffffffffffffffffffffffffffffffff1647604051610bae906142a7565b60006040518083038185875af1925050503d8060008114610beb576040519150601f19603f3d011682016040523d82523d6000602084013e610bf0565b606091505b5050905080610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b90614308565b60405180910390fd5b506001600581905550565b60608151835114610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c9061439a565b60405180910390fd5b6000835167ffffffffffffffff811115610ca257610ca1613347565b5b604051908082528060200260200182016040528015610cd05781602001602082028036833780820191505090505b50905060005b8451811015610d4d57610d1d858281518110610cf557610cf46143ba565b5b6020026020010151858381518110610d1057610d0f6143ba565b5b602002602001015161059d565b828281518110610d3057610d2f6143ba565b5b60200260200101818152505080610d4690614418565b9050610cd6565b508091505092915050565b600080610d6483611ac2565b119050919050565b600660009054906101000a900460ff16610dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db2906144ad565b60405180910390fd5b60005b8282905081101561108e57600a6000848484818110610de057610ddf6143ba565b5b90506020020135815260200190815260200160002060000154610e46868684818110610e0f57610e0e6143ba565b5b90506020020135610e38868686818110610e2c57610e2b6143ba565b5b90506020020135611ac2565b61227b90919063ffffffff16565b1115610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90614519565b60405180910390fd5b6000858583818110610e9c57610e9b6143ba565b5b9050602002013511610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90614585565b60405180910390fd5b600a6000848484818110610efa57610ef96143ba565b5b90506020020135815260200190815260200160002060020154610f61868684818110610f2957610f286143ba565b5b90506020020135610f5333878787818110610f4757610f466143ba565b5b9050602002013561059d565b61227b90919063ffffffff16565b1115610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f99906145f1565b60405180910390fd5b600a6000848484818110610fb957610fb86143ba565b5b90506020020135815260200190815260200160002060010154858583818110610fe557610fe46143ba565b5b90506020020135111561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490614683565b60405180910390fd5b61107a858583818110611043576110426143ba565b5b9050602002013561106c8585858181106110605761105f6143ba565b5b90506020020135611ac2565b61227b90919063ffffffff16565b50808061108690614418565b915050610dbe565b5061112c33838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060405180602001604052806000815250612291565b50505050565b61113a611de4565b73ffffffffffffffffffffffffffffffffffffffff1661115861174c565b73ffffffffffffffffffffffffffffffffffffffff16146111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590613f40565b60405180910390fd5b80600990805190602001906111c49291906130bc565b5050565b6111d0611de4565b73ffffffffffffffffffffffffffffffffffffffff166111ee61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600201819055505050565b61126b611de4565b73ffffffffffffffffffffffffffffffffffffffff1661128961174c565b73ffffffffffffffffffffffffffffffffffffffff16146112df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d690613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600301819055505050565b611306611de4565b73ffffffffffffffffffffffffffffffffffffffff1661132461174c565b73ffffffffffffffffffffffffffffffffffffffff161461137a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137190613f40565b60405180910390fd5b83600a60008781526020019081526020016000206002018190555082600a60008781526020019081526020016000206001018190555081600a60008781526020019081526020016000206003018190555080600a600087815260200190815260200160002060000181905550611401338684604051806020016040528060008152506124af565b5050505050565b6009805461141590613f8f565b80601f016020809104026020016040519081016040528092919081815260200182805461144190613f8f565b801561148e5780601f106114635761010080835404028352916020019161148e565b820191906000526020600020905b81548152906001019060200180831161147157829003601f168201915b505050505081565b61149e611de4565b73ffffffffffffffffffffffffffffffffffffffff166114bc61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150990613f40565b60405180910390fd5b60005b85518110156116bc57848181518110611531576115306143ba565b5b6020026020010151600a60008884815181106115505761154f6143ba565b5b60200260200101518152602001908152602001600020600201819055508381815181106115805761157f6143ba565b5b6020026020010151600a600088848151811061159f5761159e6143ba565b5b60200260200101518152602001908152602001600020600101819055508281815181106115cf576115ce6143ba565b5b6020026020010151600a60008884815181106115ee576115ed6143ba565b5b602002602001015181526020019081526020016000206003018190555081818151811061161e5761161d6143ba565b5b6020026020010151600a600088848151811061163d5761163c6143ba565b5b60200260200101518152602001908152602001600020600001819055506116a933878381518110611671576116706143ba565b5b602002602001015185848151811061168c5761168b6143ba565b5b6020026020010151604051806020016040528060008152506124af565b80806116b490614418565b915050611515565b505050505050565b6116cc611de4565b73ffffffffffffffffffffffffffffffffffffffff166116ea61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611740576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173790613f40565b60405180910390fd5b61174a6000612645565b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6008805461178390613f8f565b80601f01602080910402602001604051908101604052809291908181526020018280546117af90613f8f565b80156117fc5780601f106117d1576101008083540402835291602001916117fc565b820191906000526020600020905b8154815290600101906020018083116117df57829003601f168201915b505050505081565b61181661180f611de4565b838361270b565b5050565b611822611de4565b73ffffffffffffffffffffffffffffffffffffffff1661184061174c565b73ffffffffffffffffffffffffffffffffffffffff1614611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d90613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600101819055505050565b600660009054906101000a900460ff16611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb906144ad565b60405180910390fd5b600a6000828152602001908152602001600020600001546119368361192884611ac2565b61227b90919063ffffffff16565b1115611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196e90614519565b60405180910390fd5b600082116119ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b190614585565b60405180910390fd5b600a6000828152602001908152602001600020600201546119ed836119df338561059d565b61227b90919063ffffffff16565b1115611a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a25906145f1565b60405180910390fd5b600a600082815260200190815260200160002060010154821115611a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7e90614683565b60405180910390fd5b611aa2338284604051806020016040528060008152506124af565b611abd82611aaf83611ac2565b61227b90919063ffffffff16565b505050565b600060036000838152602001908152602001600020549050919050565b600a6020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600660009054906101000a900460ff1681565b611bbe611de4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611c045750611c0385611bfe611de4565b611b0f565b5b611c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3a90614715565b60405180910390fd5b611c508585858585612878565b5050505050565b611c5f611de4565b73ffffffffffffffffffffffffffffffffffffffff16611c7d61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cca90613f40565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3a906147a7565b60405180910390fd5b611d4c81612645565b50565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8060029080519060200190611e029291906130bc565b5050565b60606000821415611e4e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f62565b600082905060005b60008214611e80578080611e6990614418565b915050600a82611e7991906147f6565b9150611e56565b60008167ffffffffffffffff811115611e9c57611e9b613347565b5b6040519080825280601f01601f191660200182016040528015611ece5781602001600182028036833780820191505090505b5090505b60008514611f5b57600182611ee79190614827565b9150600a85611ef6919061485b565b6030611f02919061488c565b60f81b818381518110611f1857611f176143ba565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f5491906147f6565b9450611ed2565b8093505050505b919050565b8151835114611fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa290614954565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561201b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612012906149e6565b60405180910390fd5b6000612025611de4565b9050612035818787878787612afa565b60005b84518110156121e6576000858281518110612056576120556143ba565b5b602002602001015190506000858381518110612075576120746143ba565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210d90614a78565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121cb919061488c565b92505081905550505050806121df90614418565b9050612038565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161225d929190614a98565b60405180910390a4612273818787878787612c74565b505050505050565b60008183612289919061488c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f890614b41565b60405180910390fd5b8151835114612345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233c90614954565b60405180910390fd5b600061234f611de4565b905061236081600087878787612afa565b60005b84518110156124195783818151811061237f5761237e6143ba565b5b602002602001015160008087848151811061239d5761239c6143ba565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123ff919061488c565b92505081905550808061241190614418565b915050612363565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612491929190614a98565b60405180910390a46124a881600087878787612c74565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561251f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251690614b41565b60405180910390fd5b6000612529611de4565b905061254a8160008761253b88612e5b565b61254488612e5b565b87612afa565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125a9919061488c565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612627929190614b61565b60405180910390a461263e81600087878787612ed5565b5050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561277a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277190614bfc565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161286b9190613311565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156128e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128df906149e6565b60405180910390fd5b60006128f2611de4565b905061291281878761290388612e5b565b61290c88612e5b565b87612afa565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156129a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a090614a78565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a5e919061488c565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612adb929190614b61565b60405180910390a4612af1828888888888612ed5565b50505050505050565b612b08868686868686611d4f565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612bba5760005b8351811015612bb857828181518110612b5c57612b5b6143ba565b5b602002602001015160036000868481518110612b7b57612b7a6143ba565b5b602002602001015181526020019081526020016000206000828254612ba0919061488c565b9250508190555080612bb190614418565b9050612b40565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612c6c5760005b8351811015612c6a57828181518110612c0e57612c0d6143ba565b5b602002602001015160036000868481518110612c2d57612c2c6143ba565b5b602002602001015181526020019081526020016000206000828254612c529190614827565b9250508190555080612c6390614418565b9050612bf2565b505b505050505050565b612c938473ffffffffffffffffffffffffffffffffffffffff16611d57565b15612e53578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612cd9959493929190614c71565b602060405180830381600087803b158015612cf357600080fd5b505af1925050508015612d2457506040513d601f19601f82011682018060405250810190612d219190614cee565b60015b612dca57612d30614d28565b806308c379a01415612d8d5750612d45614d4a565b80612d505750612d8f565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d849190613543565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc190614e52565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4890614ee4565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115612e7a57612e79613347565b5b604051908082528060200260200182016040528015612ea85781602001602082028036833780820191505090505b5090508281600081518110612ec057612ebf6143ba565b5b60200260200101818152505080915050919050565b612ef48473ffffffffffffffffffffffffffffffffffffffff16611d57565b156130b4578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612f3a959493929190614f04565b602060405180830381600087803b158015612f5457600080fd5b505af1925050508015612f8557506040513d601f19601f82011682018060405250810190612f829190614cee565b60015b61302b57612f91614d28565b806308c379a01415612fee5750612fa6614d4a565b80612fb15750612ff0565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe59190613543565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302290614e52565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146130b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a990614ee4565b60405180910390fd5b505b505050505050565b8280546130c890613f8f565b90600052602060002090601f0160209004810192826130ea5760008555613131565b82601f1061310357805160ff1916838001178555613131565b82800160010185558215613131579182015b82811115613130578251825591602001919060010190613115565b5b50905061313e9190613142565b5090565b5b8082111561315b576000816000905550600101613143565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061319e82613173565b9050919050565b6131ae81613193565b81146131b957600080fd5b50565b6000813590506131cb816131a5565b92915050565b6000819050919050565b6131e4816131d1565b81146131ef57600080fd5b50565b600081359050613201816131db565b92915050565b6000806040838503121561321e5761321d613169565b5b600061322c858286016131bc565b925050602061323d858286016131f2565b9150509250929050565b613250816131d1565b82525050565b600060208201905061326b6000830184613247565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6132a681613271565b81146132b157600080fd5b50565b6000813590506132c38161329d565b92915050565b6000602082840312156132df576132de613169565b5b60006132ed848285016132b4565b91505092915050565b60008115159050919050565b61330b816132f6565b82525050565b60006020820190506133266000830184613302565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61337f82613336565b810181811067ffffffffffffffff8211171561339e5761339d613347565b5b80604052505050565b60006133b161315f565b90506133bd8282613376565b919050565b600067ffffffffffffffff8211156133dd576133dc613347565b5b6133e682613336565b9050602081019050919050565b82818337600083830152505050565b6000613415613410846133c2565b6133a7565b90508281526020810184848401111561343157613430613331565b5b61343c8482856133f3565b509392505050565b600082601f8301126134595761345861332c565b5b8135613469848260208601613402565b91505092915050565b60006020828403121561348857613487613169565b5b600082013567ffffffffffffffff8111156134a6576134a561316e565b5b6134b284828501613444565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156134f55780820151818401526020810190506134da565b83811115613504576000848401525b50505050565b6000613515826134bb565b61351f81856134c6565b935061352f8185602086016134d7565b61353881613336565b840191505092915050565b6000602082019050818103600083015261355d818461350a565b905092915050565b60006020828403121561357b5761357a613169565b5b6000613589848285016131f2565b91505092915050565b600067ffffffffffffffff8211156135ad576135ac613347565b5b602082029050602081019050919050565b600080fd5b60006135d66135d184613592565b6133a7565b905080838252602082019050602084028301858111156135f9576135f86135be565b5b835b81811015613622578061360e88826131f2565b8452602084019350506020810190506135fb565b5050509392505050565b600082601f8301126136415761364061332c565b5b81356136518482602086016135c3565b91505092915050565b600067ffffffffffffffff82111561367557613674613347565b5b61367e82613336565b9050602081019050919050565b600061369e6136998461365a565b6133a7565b9050828152602081018484840111156136ba576136b9613331565b5b6136c58482856133f3565b509392505050565b600082601f8301126136e2576136e161332c565b5b81356136f284826020860161368b565b91505092915050565b600080600080600060a0868803121561371757613716613169565b5b6000613725888289016131bc565b9550506020613736888289016131bc565b945050604086013567ffffffffffffffff8111156137575761375661316e565b5b6137638882890161362c565b935050606086013567ffffffffffffffff8111156137845761378361316e565b5b6137908882890161362c565b925050608086013567ffffffffffffffff8111156137b1576137b061316e565b5b6137bd888289016136cd565b9150509295509295909350565b600080604083850312156137e1576137e0613169565b5b60006137ef858286016131f2565b9250506020613800858286016131f2565b9150509250929050565b600067ffffffffffffffff82111561382557613824613347565b5b602082029050602081019050919050565b60006138496138448461380a565b6133a7565b9050808382526020820190506020840283018581111561386c5761386b6135be565b5b835b81811015613895578061388188826131bc565b84526020840193505060208101905061386e565b5050509392505050565b600082601f8301126138b4576138b361332c565b5b81356138c4848260208601613836565b91505092915050565b600080604083850312156138e4576138e3613169565b5b600083013567ffffffffffffffff8111156139025761390161316e565b5b61390e8582860161389f565b925050602083013567ffffffffffffffff81111561392f5761392e61316e565b5b61393b8582860161362c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61397a816131d1565b82525050565b600061398c8383613971565b60208301905092915050565b6000602082019050919050565b60006139b082613945565b6139ba8185613950565b93506139c583613961565b8060005b838110156139f65781516139dd8882613980565b97506139e883613998565b9250506001810190506139c9565b5085935050505092915050565b60006020820190508181036000830152613a1d81846139a5565b905092915050565b600080fd5b60008083601f840112613a4057613a3f61332c565b5b8235905067ffffffffffffffff811115613a5d57613a5c613a25565b5b602083019150836020820283011115613a7957613a786135be565b5b9250929050565b60008060008060408587031215613a9a57613a99613169565b5b600085013567ffffffffffffffff811115613ab857613ab761316e565b5b613ac487828801613a2a565b9450945050602085013567ffffffffffffffff811115613ae757613ae661316e565b5b613af387828801613a2a565b925092505092959194509250565b600080600080600060a08688031215613b1d57613b1c613169565b5b6000613b2b888289016131f2565b9550506020613b3c888289016131f2565b9450506040613b4d888289016131f2565b9350506060613b5e888289016131f2565b9250506080613b6f888289016131f2565b9150509295509295909350565b600080600080600060a08688031215613b9857613b97613169565b5b600086013567ffffffffffffffff811115613bb657613bb561316e565b5b613bc28882890161362c565b955050602086013567ffffffffffffffff811115613be357613be261316e565b5b613bef8882890161362c565b945050604086013567ffffffffffffffff811115613c1057613c0f61316e565b5b613c1c8882890161362c565b935050606086013567ffffffffffffffff811115613c3d57613c3c61316e565b5b613c498882890161362c565b925050608086013567ffffffffffffffff811115613c6a57613c6961316e565b5b613c768882890161362c565b9150509295509295909350565b613c8c81613193565b82525050565b6000602082019050613ca76000830184613c83565b92915050565b613cb6816132f6565b8114613cc157600080fd5b50565b600081359050613cd381613cad565b92915050565b60008060408385031215613cf057613cef613169565b5b6000613cfe858286016131bc565b9250506020613d0f85828601613cc4565b9150509250929050565b6000608082019050613d2e6000830187613247565b613d3b6020830186613247565b613d486040830185613247565b613d556060830184613247565b95945050505050565b60008060408385031215613d7557613d74613169565b5b6000613d83858286016131bc565b9250506020613d94858286016131bc565b9150509250929050565b600080600080600060a08688031215613dba57613db9613169565b5b6000613dc8888289016131bc565b9550506020613dd9888289016131bc565b9450506040613dea888289016131f2565b9350506060613dfb888289016131f2565b925050608086013567ffffffffffffffff811115613e1c57613e1b61316e565b5b613e28888289016136cd565b9150509295509295909350565b600060208284031215613e4b57613e4a613169565b5b6000613e59848285016131bc565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000613ebe602b836134c6565b9150613ec982613e62565b604082019050919050565b60006020820190508181036000830152613eed81613eb1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f2a6020836134c6565b9150613f3582613ef4565b602082019050919050565b60006020820190508181036000830152613f5981613f1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613fa757607f821691505b60208210811415613fbb57613fba613f60565b5b50919050565b7f455243313135353a204e4f4e4558495354454e545f544f4b454e000000000000600082015250565b6000613ff7601a836134c6565b915061400282613fc1565b602082019050919050565b6000602082019050818103600083015261402681613fea565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461405a81613f8f565b614064818661402d565b9450600182166000811461407f5760018114614090576140c3565b60ff198316865281860193506140c3565b61409985614038565b60005b838110156140bb5781548189015260018201915060208101905061409c565b838801955050505b50505092915050565b60006140d7826134bb565b6140e1818561402d565b93506140f18185602086016134d7565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b600061413360058361402d565b915061413e826140fd565b600582019050919050565b6000614155828561404d565b915061416182846140cc565b915061416c82614126565b91508190509392505050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b60006141d46032836134c6565b91506141df82614178565b604082019050919050565b60006020820190508181036000830152614203816141c7565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614240601f836134c6565b915061424b8261420a565b602082019050919050565b6000602082019050818103600083015261426f81614233565b9050919050565b600081905092915050565b50565b6000614291600083614276565b915061429c82614281565b600082019050919050565b60006142b282614284565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b60006142f26010836134c6565b91506142fd826142bc565b602082019050919050565b60006020820190508181036000830152614321816142e5565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006143846029836134c6565b915061438f82614328565b604082019050919050565b600060208201905081810360008301526143b381614377565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614423826131d1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614456576144556143e9565b5b600182019050919050565b7f436c61696d206973206e6f74206163746976652e000000000000000000000000600082015250565b60006144976014836134c6565b91506144a282614461565b602082019050919050565b600060208201905081810360008301526144c68161448a565b9050919050565b7f4d696e74696e67206c696d697420726561636865642e00000000000000000000600082015250565b60006145036016836134c6565b915061450e826144cd565b602082019050919050565b60006020820190508181036000830152614532816144f6565b9050919050565b7f5175616e746974792063616e6e6f7420626520302e0000000000000000000000600082015250565b600061456f6015836134c6565b915061457a82614539565b602082019050919050565b6000602082019050818103600083015261459e81614562565b9050919050565b7f457863656564732077616c6c6574206c696d69742e0000000000000000000000600082015250565b60006145db6015836134c6565b91506145e6826145a5565b602082019050919050565b6000602082019050818103600083015261460a816145ce565b9050919050565b7f45786365656473204e465420706572207472616e73616374696f6e206c696d6960008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b600061466d6022836134c6565b915061467882614611565b604082019050919050565b6000602082019050818103600083015261469c81614660565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006146ff6029836134c6565b915061470a826146a3565b604082019050919050565b6000602082019050818103600083015261472e816146f2565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006147916026836134c6565b915061479c82614735565b604082019050919050565b600060208201905081810360008301526147c081614784565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614801826131d1565b915061480c836131d1565b92508261481c5761481b6147c7565b5b828204905092915050565b6000614832826131d1565b915061483d836131d1565b9250828210156148505761484f6143e9565b5b828203905092915050565b6000614866826131d1565b9150614871836131d1565b925082614881576148806147c7565b5b828206905092915050565b6000614897826131d1565b91506148a2836131d1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148d7576148d66143e9565b5b828201905092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061493e6028836134c6565b9150614949826148e2565b604082019050919050565b6000602082019050818103600083015261496d81614931565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006149d06025836134c6565b91506149db82614974565b604082019050919050565b600060208201905081810360008301526149ff816149c3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614a62602a836134c6565b9150614a6d82614a06565b604082019050919050565b60006020820190508181036000830152614a9181614a55565b9050919050565b60006040820190508181036000830152614ab281856139a5565b90508181036020830152614ac681846139a5565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614b2b6021836134c6565b9150614b3682614acf565b604082019050919050565b60006020820190508181036000830152614b5a81614b1e565b9050919050565b6000604082019050614b766000830185613247565b614b836020830184613247565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614be66029836134c6565b9150614bf182614b8a565b604082019050919050565b60006020820190508181036000830152614c1581614bd9565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614c4382614c1c565b614c4d8185614c27565b9350614c5d8185602086016134d7565b614c6681613336565b840191505092915050565b600060a082019050614c866000830188613c83565b614c936020830187613c83565b8181036040830152614ca581866139a5565b90508181036060830152614cb981856139a5565b90508181036080830152614ccd8184614c38565b90509695505050505050565b600081519050614ce88161329d565b92915050565b600060208284031215614d0457614d03613169565b5b6000614d1284828501614cd9565b91505092915050565b60008160e01c9050919050565b600060033d1115614d475760046000803e614d44600051614d1b565b90505b90565b600060443d1015614d5a57614ddd565b614d6261315f565b60043d036004823e80513d602482011167ffffffffffffffff82111715614d8a575050614ddd565b808201805167ffffffffffffffff811115614da85750505050614ddd565b80602083010160043d038501811115614dc5575050505050614ddd565b614dd482602001850186613376565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614e3c6034836134c6565b9150614e4782614de0565b604082019050919050565b60006020820190508181036000830152614e6b81614e2f565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000614ece6028836134c6565b9150614ed982614e72565b604082019050919050565b60006020820190508181036000830152614efd81614ec1565b9050919050565b600060a082019050614f196000830188613c83565b614f266020830187613c83565b614f336040830186613247565b614f406060830185613247565b8181036080830152614f528184614c38565b9050969550505050505056fea264697066735822122092e06050b94d80bf1eae9044d5ef26b7fa1497f0b4f852f4bac63c1d81f7194664736f6c6343000808003368747470733a2f2f73616d6f74636c75622e6d7970696e6174612e636c6f75642f697066732f516d654c6e31567832464c4d5179704c507151666f6859714574346b4a6e5578354455706333706d7747553835772f",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d95760003560e01c80635f400b4d11610104578063a35a813d116100a2578063e985e9c511610071578063e985e9c514610517578063eb8d244414610547578063f242432a14610565578063f2fde38b14610581576101d9565b8063a35a813d1461047c578063a7dc7f2a14610498578063bd85b039146104b4578063d23f3670146104e4576101d9565b8063715018a6116100de578063715018a61461041a5780638da5cb5b1461042457806395d89b4114610442578063a22cb46514610460576101d9565b80635f400b4d146103c45780636c0360eb146103e05780636e277faa146103fe576101d9565b806337da577c1161017c57806353ac2e2f1161014b57806353ac2e2f1461035457806355f804b31461037057806356ad15f61461038c57806356d51e6f146103a8576101d9565b806337da577c146102ce5780633ccfd60b146102ea5780634e1273f4146102f45780634f558e7914610324576101d9565b806306fdde03116101b857806306fdde031461025a5780630e89341c146102785780632eb2c2d6146102a857806334918dfd146102c4576101d9565b8062fdd58e146101de57806301ffc9a71461020e57806302fe53051461023e575b600080fd5b6101f860048036038101906101f39190613207565b61059d565b6040516102059190613256565b60405180910390f35b610228600480360381019061022391906132c9565b610666565b6040516102359190613311565b60405180910390f35b61025860048036038101906102539190613472565b610748565b005b6102626107d0565b60405161026f9190613543565b60405180910390f35b610292600480360381019061028d9190613565565b61085e565b60405161029f9190613543565b60405180910390f35b6102c260048036038101906102bd91906136fb565b6108da565b005b6102cc61097b565b005b6102e860048036038101906102e391906137ca565b610a23565b005b6102f2610abe565b005b61030e600480360381019061030991906138cd565b610c3f565b60405161031b9190613a03565b60405180910390f35b61033e60048036038101906103399190613565565b610d58565b60405161034b9190613311565b60405180910390f35b61036e60048036038101906103699190613a80565b610d6c565b005b61038a60048036038101906103859190613472565b611132565b005b6103a660048036038101906103a191906137ca565b6111c8565b005b6103c260048036038101906103bd91906137ca565b611263565b005b6103de60048036038101906103d99190613b01565b6112fe565b005b6103e8611408565b6040516103f59190613543565b60405180910390f35b61041860048036038101906104139190613b7c565b611496565b005b6104226116c4565b005b61042c61174c565b6040516104399190613c92565b60405180910390f35b61044a611776565b6040516104579190613543565b60405180910390f35b61047a60048036038101906104759190613cd9565b611804565b005b610496600480360381019061049191906137ca565b61181a565b005b6104b260048036038101906104ad91906137ca565b6118b5565b005b6104ce60048036038101906104c99190613565565b611ac2565b6040516104db9190613256565b60405180910390f35b6104fe60048036038101906104f99190613565565b611adf565b60405161050e9493929190613d19565b60405180910390f35b610531600480360381019061052c9190613d5e565b611b0f565b60405161053e9190613311565b60405180910390f35b61054f611ba3565b60405161055c9190613311565b60405180910390f35b61057f600480360381019061057a9190613d9e565b611bb6565b005b61059b60048036038101906105969190613e35565b611c57565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590613ed4565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061073157507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610741575061074082611d7a565b5b9050919050565b610750611de4565b73ffffffffffffffffffffffffffffffffffffffff1661076e61174c565b73ffffffffffffffffffffffffffffffffffffffff16146107c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb90613f40565b60405180910390fd5b6107cd81611dec565b50565b600780546107dd90613f8f565b80601f016020809104026020016040519081016040528092919081815260200182805461080990613f8f565b80156108565780601f1061082b57610100808354040283529160200191610856565b820191906000526020600020905b81548152906001019060200180831161083957829003601f168201915b505050505081565b606061086982610d58565b6108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f9061400d565b60405180910390fd5b60096108b383611e06565b6040516020016108c4929190614149565b6040516020818303038152906040529050919050565b6108e2611de4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610928575061092785610922611de4565b611b0f565b5b610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e906141ea565b60405180910390fd5b6109748585858585611f67565b5050505050565b610983611de4565b73ffffffffffffffffffffffffffffffffffffffff166109a161174c565b73ffffffffffffffffffffffffffffffffffffffff16146109f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ee90613f40565b60405180910390fd5b600660009054906101000a900460ff1615600660006101000a81548160ff021916908315150217905550565b610a2b611de4565b73ffffffffffffffffffffffffffffffffffffffff16610a4961174c565b73ffffffffffffffffffffffffffffffffffffffff1614610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9690613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600001819055505050565b610ac6611de4565b73ffffffffffffffffffffffffffffffffffffffff16610ae461174c565b73ffffffffffffffffffffffffffffffffffffffff1614610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613f40565b60405180910390fd5b60026005541415610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7790614256565b60405180910390fd5b600260058190555060003373ffffffffffffffffffffffffffffffffffffffff1647604051610bae906142a7565b60006040518083038185875af1925050503d8060008114610beb576040519150601f19603f3d011682016040523d82523d6000602084013e610bf0565b606091505b5050905080610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b90614308565b60405180910390fd5b506001600581905550565b60608151835114610c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7c9061439a565b60405180910390fd5b6000835167ffffffffffffffff811115610ca257610ca1613347565b5b604051908082528060200260200182016040528015610cd05781602001602082028036833780820191505090505b50905060005b8451811015610d4d57610d1d858281518110610cf557610cf46143ba565b5b6020026020010151858381518110610d1057610d0f6143ba565b5b602002602001015161059d565b828281518110610d3057610d2f6143ba565b5b60200260200101818152505080610d4690614418565b9050610cd6565b508091505092915050565b600080610d6483611ac2565b119050919050565b600660009054906101000a900460ff16610dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db2906144ad565b60405180910390fd5b60005b8282905081101561108e57600a6000848484818110610de057610ddf6143ba565b5b90506020020135815260200190815260200160002060000154610e46868684818110610e0f57610e0e6143ba565b5b90506020020135610e38868686818110610e2c57610e2b6143ba565b5b90506020020135611ac2565b61227b90919063ffffffff16565b1115610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90614519565b60405180910390fd5b6000858583818110610e9c57610e9b6143ba565b5b9050602002013511610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda90614585565b60405180910390fd5b600a6000848484818110610efa57610ef96143ba565b5b90506020020135815260200190815260200160002060020154610f61868684818110610f2957610f286143ba565b5b90506020020135610f5333878787818110610f4757610f466143ba565b5b9050602002013561059d565b61227b90919063ffffffff16565b1115610fa2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f99906145f1565b60405180910390fd5b600a6000848484818110610fb957610fb86143ba565b5b90506020020135815260200190815260200160002060010154858583818110610fe557610fe46143ba565b5b90506020020135111561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490614683565b60405180910390fd5b61107a858583818110611043576110426143ba565b5b9050602002013561106c8585858181106110605761105f6143ba565b5b90506020020135611ac2565b61227b90919063ffffffff16565b50808061108690614418565b915050610dbe565b5061112c33838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060405180602001604052806000815250612291565b50505050565b61113a611de4565b73ffffffffffffffffffffffffffffffffffffffff1661115861174c565b73ffffffffffffffffffffffffffffffffffffffff16146111ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a590613f40565b60405180910390fd5b80600990805190602001906111c49291906130bc565b5050565b6111d0611de4565b73ffffffffffffffffffffffffffffffffffffffff166111ee61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123b90613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600201819055505050565b61126b611de4565b73ffffffffffffffffffffffffffffffffffffffff1661128961174c565b73ffffffffffffffffffffffffffffffffffffffff16146112df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d690613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600301819055505050565b611306611de4565b73ffffffffffffffffffffffffffffffffffffffff1661132461174c565b73ffffffffffffffffffffffffffffffffffffffff161461137a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137190613f40565b60405180910390fd5b83600a60008781526020019081526020016000206002018190555082600a60008781526020019081526020016000206001018190555081600a60008781526020019081526020016000206003018190555080600a600087815260200190815260200160002060000181905550611401338684604051806020016040528060008152506124af565b5050505050565b6009805461141590613f8f565b80601f016020809104026020016040519081016040528092919081815260200182805461144190613f8f565b801561148e5780601f106114635761010080835404028352916020019161148e565b820191906000526020600020905b81548152906001019060200180831161147157829003601f168201915b505050505081565b61149e611de4565b73ffffffffffffffffffffffffffffffffffffffff166114bc61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150990613f40565b60405180910390fd5b60005b85518110156116bc57848181518110611531576115306143ba565b5b6020026020010151600a60008884815181106115505761154f6143ba565b5b60200260200101518152602001908152602001600020600201819055508381815181106115805761157f6143ba565b5b6020026020010151600a600088848151811061159f5761159e6143ba565b5b60200260200101518152602001908152602001600020600101819055508281815181106115cf576115ce6143ba565b5b6020026020010151600a60008884815181106115ee576115ed6143ba565b5b602002602001015181526020019081526020016000206003018190555081818151811061161e5761161d6143ba565b5b6020026020010151600a600088848151811061163d5761163c6143ba565b5b60200260200101518152602001908152602001600020600001819055506116a933878381518110611671576116706143ba565b5b602002602001015185848151811061168c5761168b6143ba565b5b6020026020010151604051806020016040528060008152506124af565b80806116b490614418565b915050611515565b505050505050565b6116cc611de4565b73ffffffffffffffffffffffffffffffffffffffff166116ea61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611740576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173790613f40565b60405180910390fd5b61174a6000612645565b565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6008805461178390613f8f565b80601f01602080910402602001604051908101604052809291908181526020018280546117af90613f8f565b80156117fc5780601f106117d1576101008083540402835291602001916117fc565b820191906000526020600020905b8154815290600101906020018083116117df57829003601f168201915b505050505081565b61181661180f611de4565b838361270b565b5050565b611822611de4565b73ffffffffffffffffffffffffffffffffffffffff1661184061174c565b73ffffffffffffffffffffffffffffffffffffffff1614611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d90613f40565b60405180910390fd5b81600a6000838152602001908152602001600020600101819055505050565b600660009054906101000a900460ff16611904576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118fb906144ad565b60405180910390fd5b600a6000828152602001908152602001600020600001546119368361192884611ac2565b61227b90919063ffffffff16565b1115611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196e90614519565b60405180910390fd5b600082116119ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b190614585565b60405180910390fd5b600a6000828152602001908152602001600020600201546119ed836119df338561059d565b61227b90919063ffffffff16565b1115611a2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a25906145f1565b60405180910390fd5b600a600082815260200190815260200160002060010154821115611a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7e90614683565b60405180910390fd5b611aa2338284604051806020016040528060008152506124af565b611abd82611aaf83611ac2565b61227b90919063ffffffff16565b505050565b600060036000838152602001908152602001600020549050919050565b600a6020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600660009054906101000a900460ff1681565b611bbe611de4565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611c045750611c0385611bfe611de4565b611b0f565b5b611c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3a90614715565b60405180910390fd5b611c508585858585612878565b5050505050565b611c5f611de4565b73ffffffffffffffffffffffffffffffffffffffff16611c7d61174c565b73ffffffffffffffffffffffffffffffffffffffff1614611cd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cca90613f40565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3a906147a7565b60405180910390fd5b611d4c81612645565b50565b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8060029080519060200190611e029291906130bc565b5050565b60606000821415611e4e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611f62565b600082905060005b60008214611e80578080611e6990614418565b915050600a82611e7991906147f6565b9150611e56565b60008167ffffffffffffffff811115611e9c57611e9b613347565b5b6040519080825280601f01601f191660200182016040528015611ece5781602001600182028036833780820191505090505b5090505b60008514611f5b57600182611ee79190614827565b9150600a85611ef6919061485b565b6030611f02919061488c565b60f81b818381518110611f1857611f176143ba565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611f5491906147f6565b9450611ed2565b8093505050505b919050565b8151835114611fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa290614954565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561201b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612012906149e6565b60405180910390fd5b6000612025611de4565b9050612035818787878787612afa565b60005b84518110156121e6576000858281518110612056576120556143ba565b5b602002602001015190506000858381518110612075576120746143ba565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612116576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210d90614a78565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121cb919061488c565b92505081905550505050806121df90614418565b9050612038565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161225d929190614a98565b60405180910390a4612273818787878787612c74565b505050505050565b60008183612289919061488c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f890614b41565b60405180910390fd5b8151835114612345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233c90614954565b60405180910390fd5b600061234f611de4565b905061236081600087878787612afa565b60005b84518110156124195783818151811061237f5761237e6143ba565b5b602002602001015160008087848151811061239d5761239c6143ba565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123ff919061488c565b92505081905550808061241190614418565b915050612363565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612491929190614a98565b60405180910390a46124a881600087878787612c74565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561251f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251690614b41565b60405180910390fd5b6000612529611de4565b905061254a8160008761253b88612e5b565b61254488612e5b565b87612afa565b8260008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125a9919061488c565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612627929190614b61565b60405180910390a461263e81600087878787612ed5565b5050505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561277a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277190614bfc565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161286b9190613311565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156128e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128df906149e6565b60405180910390fd5b60006128f2611de4565b905061291281878761290388612e5b565b61290c88612e5b565b87612afa565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156129a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a090614a78565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a5e919061488c565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051612adb929190614b61565b60405180910390a4612af1828888888888612ed5565b50505050505050565b612b08868686868686611d4f565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612bba5760005b8351811015612bb857828181518110612b5c57612b5b6143ba565b5b602002602001015160036000868481518110612b7b57612b7a6143ba565b5b602002602001015181526020019081526020016000206000828254612ba0919061488c565b9250508190555080612bb190614418565b9050612b40565b505b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612c6c5760005b8351811015612c6a57828181518110612c0e57612c0d6143ba565b5b602002602001015160036000868481518110612c2d57612c2c6143ba565b5b602002602001015181526020019081526020016000206000828254612c529190614827565b9250508190555080612c6390614418565b9050612bf2565b505b505050505050565b612c938473ffffffffffffffffffffffffffffffffffffffff16611d57565b15612e53578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612cd9959493929190614c71565b602060405180830381600087803b158015612cf357600080fd5b505af1925050508015612d2457506040513d601f19601f82011682018060405250810190612d219190614cee565b60015b612dca57612d30614d28565b806308c379a01415612d8d5750612d45614d4a565b80612d505750612d8f565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d849190613543565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dc190614e52565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e4890614ee4565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115612e7a57612e79613347565b5b604051908082528060200260200182016040528015612ea85781602001602082028036833780820191505090505b5090508281600081518110612ec057612ebf6143ba565b5b60200260200101818152505080915050919050565b612ef48473ffffffffffffffffffffffffffffffffffffffff16611d57565b156130b4578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612f3a959493929190614f04565b602060405180830381600087803b158015612f5457600080fd5b505af1925050508015612f8557506040513d601f19601f82011682018060405250810190612f829190614cee565b60015b61302b57612f91614d28565b806308c379a01415612fee5750612fa6614d4a565b80612fb15750612ff0565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe59190613543565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161302290614e52565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146130b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a990614ee4565b60405180910390fd5b505b505050505050565b8280546130c890613f8f565b90600052602060002090601f0160209004810192826130ea5760008555613131565b82601f1061310357805160ff1916838001178555613131565b82800160010185558215613131579182015b82811115613130578251825591602001919060010190613115565b5b50905061313e9190613142565b5090565b5b8082111561315b576000816000905550600101613143565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061319e82613173565b9050919050565b6131ae81613193565b81146131b957600080fd5b50565b6000813590506131cb816131a5565b92915050565b6000819050919050565b6131e4816131d1565b81146131ef57600080fd5b50565b600081359050613201816131db565b92915050565b6000806040838503121561321e5761321d613169565b5b600061322c858286016131bc565b925050602061323d858286016131f2565b9150509250929050565b613250816131d1565b82525050565b600060208201905061326b6000830184613247565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6132a681613271565b81146132b157600080fd5b50565b6000813590506132c38161329d565b92915050565b6000602082840312156132df576132de613169565b5b60006132ed848285016132b4565b91505092915050565b60008115159050919050565b61330b816132f6565b82525050565b60006020820190506133266000830184613302565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61337f82613336565b810181811067ffffffffffffffff8211171561339e5761339d613347565b5b80604052505050565b60006133b161315f565b90506133bd8282613376565b919050565b600067ffffffffffffffff8211156133dd576133dc613347565b5b6133e682613336565b9050602081019050919050565b82818337600083830152505050565b6000613415613410846133c2565b6133a7565b90508281526020810184848401111561343157613430613331565b5b61343c8482856133f3565b509392505050565b600082601f8301126134595761345861332c565b5b8135613469848260208601613402565b91505092915050565b60006020828403121561348857613487613169565b5b600082013567ffffffffffffffff8111156134a6576134a561316e565b5b6134b284828501613444565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156134f55780820151818401526020810190506134da565b83811115613504576000848401525b50505050565b6000613515826134bb565b61351f81856134c6565b935061352f8185602086016134d7565b61353881613336565b840191505092915050565b6000602082019050818103600083015261355d818461350a565b905092915050565b60006020828403121561357b5761357a613169565b5b6000613589848285016131f2565b91505092915050565b600067ffffffffffffffff8211156135ad576135ac613347565b5b602082029050602081019050919050565b600080fd5b60006135d66135d184613592565b6133a7565b905080838252602082019050602084028301858111156135f9576135f86135be565b5b835b81811015613622578061360e88826131f2565b8452602084019350506020810190506135fb565b5050509392505050565b600082601f8301126136415761364061332c565b5b81356136518482602086016135c3565b91505092915050565b600067ffffffffffffffff82111561367557613674613347565b5b61367e82613336565b9050602081019050919050565b600061369e6136998461365a565b6133a7565b9050828152602081018484840111156136ba576136b9613331565b5b6136c58482856133f3565b509392505050565b600082601f8301126136e2576136e161332c565b5b81356136f284826020860161368b565b91505092915050565b600080600080600060a0868803121561371757613716613169565b5b6000613725888289016131bc565b9550506020613736888289016131bc565b945050604086013567ffffffffffffffff8111156137575761375661316e565b5b6137638882890161362c565b935050606086013567ffffffffffffffff8111156137845761378361316e565b5b6137908882890161362c565b925050608086013567ffffffffffffffff8111156137b1576137b061316e565b5b6137bd888289016136cd565b9150509295509295909350565b600080604083850312156137e1576137e0613169565b5b60006137ef858286016131f2565b9250506020613800858286016131f2565b9150509250929050565b600067ffffffffffffffff82111561382557613824613347565b5b602082029050602081019050919050565b60006138496138448461380a565b6133a7565b9050808382526020820190506020840283018581111561386c5761386b6135be565b5b835b81811015613895578061388188826131bc565b84526020840193505060208101905061386e565b5050509392505050565b600082601f8301126138b4576138b361332c565b5b81356138c4848260208601613836565b91505092915050565b600080604083850312156138e4576138e3613169565b5b600083013567ffffffffffffffff8111156139025761390161316e565b5b61390e8582860161389f565b925050602083013567ffffffffffffffff81111561392f5761392e61316e565b5b61393b8582860161362c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61397a816131d1565b82525050565b600061398c8383613971565b60208301905092915050565b6000602082019050919050565b60006139b082613945565b6139ba8185613950565b93506139c583613961565b8060005b838110156139f65781516139dd8882613980565b97506139e883613998565b9250506001810190506139c9565b5085935050505092915050565b60006020820190508181036000830152613a1d81846139a5565b905092915050565b600080fd5b60008083601f840112613a4057613a3f61332c565b5b8235905067ffffffffffffffff811115613a5d57613a5c613a25565b5b602083019150836020820283011115613a7957613a786135be565b5b9250929050565b60008060008060408587031215613a9a57613a99613169565b5b600085013567ffffffffffffffff811115613ab857613ab761316e565b5b613ac487828801613a2a565b9450945050602085013567ffffffffffffffff811115613ae757613ae661316e565b5b613af387828801613a2a565b925092505092959194509250565b600080600080600060a08688031215613b1d57613b1c613169565b5b6000613b2b888289016131f2565b9550506020613b3c888289016131f2565b9450506040613b4d888289016131f2565b9350506060613b5e888289016131f2565b9250506080613b6f888289016131f2565b9150509295509295909350565b600080600080600060a08688031215613b9857613b97613169565b5b600086013567ffffffffffffffff811115613bb657613bb561316e565b5b613bc28882890161362c565b955050602086013567ffffffffffffffff811115613be357613be261316e565b5b613bef8882890161362c565b945050604086013567ffffffffffffffff811115613c1057613c0f61316e565b5b613c1c8882890161362c565b935050606086013567ffffffffffffffff811115613c3d57613c3c61316e565b5b613c498882890161362c565b925050608086013567ffffffffffffffff811115613c6a57613c6961316e565b5b613c768882890161362c565b9150509295509295909350565b613c8c81613193565b82525050565b6000602082019050613ca76000830184613c83565b92915050565b613cb6816132f6565b8114613cc157600080fd5b50565b600081359050613cd381613cad565b92915050565b60008060408385031215613cf057613cef613169565b5b6000613cfe858286016131bc565b9250506020613d0f85828601613cc4565b9150509250929050565b6000608082019050613d2e6000830187613247565b613d3b6020830186613247565b613d486040830185613247565b613d556060830184613247565b95945050505050565b60008060408385031215613d7557613d74613169565b5b6000613d83858286016131bc565b9250506020613d94858286016131bc565b9150509250929050565b600080600080600060a08688031215613dba57613db9613169565b5b6000613dc8888289016131bc565b9550506020613dd9888289016131bc565b9450506040613dea888289016131f2565b9350506060613dfb888289016131f2565b925050608086013567ffffffffffffffff811115613e1c57613e1b61316e565b5b613e28888289016136cd565b9150509295509295909350565b600060208284031215613e4b57613e4a613169565b5b6000613e59848285016131bc565b91505092915050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000613ebe602b836134c6565b9150613ec982613e62565b604082019050919050565b60006020820190508181036000830152613eed81613eb1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f2a6020836134c6565b9150613f3582613ef4565b602082019050919050565b60006020820190508181036000830152613f5981613f1d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613fa757607f821691505b60208210811415613fbb57613fba613f60565b5b50919050565b7f455243313135353a204e4f4e4558495354454e545f544f4b454e000000000000600082015250565b6000613ff7601a836134c6565b915061400282613fc1565b602082019050919050565b6000602082019050818103600083015261402681613fea565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461405a81613f8f565b614064818661402d565b9450600182166000811461407f5760018114614090576140c3565b60ff198316865281860193506140c3565b61409985614038565b60005b838110156140bb5781548189015260018201915060208101905061409c565b838801955050505b50505092915050565b60006140d7826134bb565b6140e1818561402d565b93506140f18185602086016134d7565b80840191505092915050565b7f2e6a736f6e000000000000000000000000000000000000000000000000000000600082015250565b600061413360058361402d565b915061413e826140fd565b600582019050919050565b6000614155828561404d565b915061416182846140cc565b915061416c82614126565b91508190509392505050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b60006141d46032836134c6565b91506141df82614178565b604082019050919050565b60006020820190508181036000830152614203816141c7565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614240601f836134c6565b915061424b8261420a565b602082019050919050565b6000602082019050818103600083015261426f81614233565b9050919050565b600081905092915050565b50565b6000614291600083614276565b915061429c82614281565b600082019050919050565b60006142b282614284565b9150819050919050565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b60006142f26010836134c6565b91506142fd826142bc565b602082019050919050565b60006020820190508181036000830152614321816142e5565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006143846029836134c6565b915061438f82614328565b604082019050919050565b600060208201905081810360008301526143b381614377565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614423826131d1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614456576144556143e9565b5b600182019050919050565b7f436c61696d206973206e6f74206163746976652e000000000000000000000000600082015250565b60006144976014836134c6565b91506144a282614461565b602082019050919050565b600060208201905081810360008301526144c68161448a565b9050919050565b7f4d696e74696e67206c696d697420726561636865642e00000000000000000000600082015250565b60006145036016836134c6565b915061450e826144cd565b602082019050919050565b60006020820190508181036000830152614532816144f6565b9050919050565b7f5175616e746974792063616e6e6f7420626520302e0000000000000000000000600082015250565b600061456f6015836134c6565b915061457a82614539565b602082019050919050565b6000602082019050818103600083015261459e81614562565b9050919050565b7f457863656564732077616c6c6574206c696d69742e0000000000000000000000600082015250565b60006145db6015836134c6565b91506145e6826145a5565b602082019050919050565b6000602082019050818103600083015261460a816145ce565b9050919050565b7f45786365656473204e465420706572207472616e73616374696f6e206c696d6960008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b600061466d6022836134c6565b915061467882614611565b604082019050919050565b6000602082019050818103600083015261469c81614660565b9050919050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b60006146ff6029836134c6565b915061470a826146a3565b604082019050919050565b6000602082019050818103600083015261472e816146f2565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006147916026836134c6565b915061479c82614735565b604082019050919050565b600060208201905081810360008301526147c081614784565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614801826131d1565b915061480c836131d1565b92508261481c5761481b6147c7565b5b828204905092915050565b6000614832826131d1565b915061483d836131d1565b9250828210156148505761484f6143e9565b5b828203905092915050565b6000614866826131d1565b9150614871836131d1565b925082614881576148806147c7565b5b828206905092915050565b6000614897826131d1565b91506148a2836131d1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148d7576148d66143e9565b5b828201905092915050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061493e6028836134c6565b9150614949826148e2565b604082019050919050565b6000602082019050818103600083015261496d81614931565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006149d06025836134c6565b91506149db82614974565b604082019050919050565b600060208201905081810360008301526149ff816149c3565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b6000614a62602a836134c6565b9150614a6d82614a06565b604082019050919050565b60006020820190508181036000830152614a9181614a55565b9050919050565b60006040820190508181036000830152614ab281856139a5565b90508181036020830152614ac681846139a5565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000614b2b6021836134c6565b9150614b3682614acf565b604082019050919050565b60006020820190508181036000830152614b5a81614b1e565b9050919050565b6000604082019050614b766000830185613247565b614b836020830184613247565b9392505050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614be66029836134c6565b9150614bf182614b8a565b604082019050919050565b60006020820190508181036000830152614c1581614bd9565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000614c4382614c1c565b614c4d8185614c27565b9350614c5d8185602086016134d7565b614c6681613336565b840191505092915050565b600060a082019050614c866000830188613c83565b614c936020830187613c83565b8181036040830152614ca581866139a5565b90508181036060830152614cb981856139a5565b90508181036080830152614ccd8184614c38565b90509695505050505050565b600081519050614ce88161329d565b92915050565b600060208284031215614d0457614d03613169565b5b6000614d1284828501614cd9565b91505092915050565b60008160e01c9050919050565b600060033d1115614d475760046000803e614d44600051614d1b565b90505b90565b600060443d1015614d5a57614ddd565b614d6261315f565b60043d036004823e80513d602482011167ffffffffffffffff82111715614d8a575050614ddd565b808201805167ffffffffffffffff811115614da85750505050614ddd565b80602083010160043d038501811115614dc5575050505050614ddd565b614dd482602001850186613376565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000614e3c6034836134c6565b9150614e4782614de0565b604082019050919050565b60006020820190508181036000830152614e6b81614e2f565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000614ece6028836134c6565b9150614ed982614e72565b604082019050919050565b60006020820190508181036000830152614efd81614ec1565b9050919050565b600060a082019050614f196000830188613c83565b614f266020830187613c83565b614f336040830186613247565b614f406060830185613247565b8181036080830152614f528184614c38565b9050969550505050505056fea264697066735822122092e06050b94d80bf1eae9044d5ef26b7fa1497f0b4f852f4bac63c1d81f7194664736f6c63430008080033",
    "devdoc": {
      "kind": "dev",
      "methods": {
        "balanceOf(address,uint256)": {
          "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
        },
        "balanceOfBatch(address[],uint256[])": {
          "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
        },
        "exists(uint256)": {
          "details": "Indicates whether any token exist with a given id, or not."
        },
        "isApprovedForAll(address,address)": {
          "details": "See {IERC1155-isApprovedForAll}."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
          "details": "See {IERC1155-safeBatchTransferFrom}."
        },
        "safeTransferFrom(address,address,uint256,uint256,bytes)": {
          "details": "See {IERC1155-safeTransferFrom}."
        },
        "setApprovalForAll(address,bool)": {
          "details": "See {IERC1155-setApprovalForAll}."
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        },
        "totalSupply(uint256)": {
          "details": "Total amount of tokens in with a given id."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "title": "Don Rouch WhoIsSamot - an 1155 contract for  0800 Don Rouch",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 170,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "_balances",
          "offset": 0,
          "slot": "0",
          "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
        },
        {
          "astId": 176,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "_operatorApprovals",
          "offset": 0,
          "slot": "1",
          "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
        },
        {
          "astId": 178,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "_uri",
          "offset": 0,
          "slot": "2",
          "type": "t_string_storage"
        },
        {
          "astId": 1413,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "_totalSupply",
          "offset": 0,
          "slot": "3",
          "type": "t_mapping(t_uint256,t_uint256)"
        },
        {
          "astId": 7,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "_owner",
          "offset": 0,
          "slot": "4",
          "type": "t_address"
        },
        {
          "astId": 115,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "_status",
          "offset": 0,
          "slot": "5",
          "type": "t_uint256"
        },
        {
          "astId": 2452,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "saleIsActive",
          "offset": 0,
          "slot": "6",
          "type": "t_bool"
        },
        {
          "astId": 2454,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "name",
          "offset": 0,
          "slot": "7",
          "type": "t_string_storage"
        },
        {
          "astId": 2456,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "symbol",
          "offset": 0,
          "slot": "8",
          "type": "t_string_storage"
        },
        {
          "astId": 2459,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "baseURI",
          "offset": 0,
          "slot": "9",
          "type": "t_string_storage"
        },
        {
          "astId": 2464,
          "contract": "contracts/DonRouch.sol:DonRouch",
          "label": "idStats",
          "offset": 0,
          "slot": "10",
          "type": "t_mapping(t_uint256,t_struct(itemData)2449_storage)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_mapping(t_address,t_bool))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => bool))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_bool)"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => mapping(address => uint256))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_uint256)"
        },
        "t_mapping(t_uint256,t_struct(itemData)2449_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct DonRouch.itemData)",
          "numberOfBytes": "32",
          "value": "t_struct(itemData)2449_storage"
        },
        "t_mapping(t_uint256,t_uint256)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(itemData)2449_storage": {
          "encoding": "inplace",
          "label": "struct DonRouch.itemData",
          "members": [
            {
              "astId": 2442,
              "contract": "contracts/DonRouch.sol:DonRouch",
              "label": "maxSupply",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256"
            },
            {
              "astId": 2444,
              "contract": "contracts/DonRouch.sol:DonRouch",
              "label": "maxToMint",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 2446,
              "contract": "contracts/DonRouch.sol:DonRouch",
              "label": "maxPerWallet",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 2448,
              "contract": "contracts/DonRouch.sol:DonRouch",
              "label": "initialSupply",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "128"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }